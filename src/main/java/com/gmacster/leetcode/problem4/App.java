package com.gmacster.leetcode.problem4;

import java.util.TreeSet;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) {
        App app = new App();

        int[] first = new int[] {1};
        int[] second = new int[] {1};

        System.out.println(app.findMedianSortedArrays(first, second));
    }

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        Integer[] combined = new Integer[nums1.length + nums2.length];

        int rightIndex = 0;
        int leftIndex = 0;

        while (leftIndex < nums1.length) {
            int left = nums1[leftIndex];

            int right;
            while (rightIndex < nums2.length && (right = nums2[rightIndex]) < left) {
                combined[leftIndex + rightIndex] = right;
                rightIndex++;
            }

            combined[leftIndex + rightIndex] = left;
            leftIndex++;
        }

        while (rightIndex < nums2.length) {
            combined[leftIndex + rightIndex] = nums2[rightIndex];
            rightIndex++;
        }

        if (combined.length % 2 == 0) {
            int middle = combined.length / 2;
            return (combined[middle] + combined[middle - 1]) / 2.0;
        } else {
            return combined[combined.length / 2];
        }
    }
}
